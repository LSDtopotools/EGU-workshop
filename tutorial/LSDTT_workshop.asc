image::images/LSD-logo_horizontal.png[width=300,align=center]

// :doctype: article
:authors: Simon Mudd, Fiona Clubb, Stuart Grieve, Boris Gailleton
:doctitle: LSDTopoTools: open-source software for topographic analysis
ifdef::backend-pdf[:notitle:]
ifdef::backend-pdf[]
[discrete]
= {doctitle}
endif::[]

:stem: latexmath
:mathematical-format: svg


== Introduction

*LSDTopoTools* is software for performing topographic analysis of landscapes, with applications in hydrology, ecology, soil science, and geomorphology.

Firstly, we should tell you that LSD stands for _Land Surface Dynamics_,
and is named after the http://www.ed.ac.uk/geosciences/research/research-institutes/global-change/land-surface[Land Surface Dynamics research cluster]
in the http://www.ed.ac.uk/schools-departments/geosciences/[School of GeoSciences] at the http://www.ed.ac.uk/home[University of Edinburgh].

Today we'll use the code to extract channel networks, get maps of slope and curvature across the landscape, and do some chi profile analysis.

== The philosophy behind LSDTopoTools

LSDTopoTools is a software package designed to analyse landscapes for applications in geomorphology, hydrology, ecology and allied fields. It is not intended as a substitute for a GIS, but rather is designed to be a research and analysis tool that produces reproducible data. The motivations behind its development were:

1. To serve as a framework for implementing the latest developments in topographic analysis.

2. To serve as a framework for developing new topographic analysis techniques.

3. To serve as a framework for numerical modelling of landscapes (for hydrology, geomorphology and ecology).

4. To improve the speed and performance of topographic analysis versus other tools (e.g., commercial GIS software).

5. To enable reproducible topographic analysis in the research context.

The toolbox is organised around objects, which are used to store and manipulate specific kinds of data, and driver functions, which users write to interface with the objects.

== Getting started

=== Installing LSDTopoTools

The preferred way of installing LSDTopoTools is using https://www.docker.com/[Docker], software for creating and managing https://en.wikipedia.org/wiki/Operating-system-level_virtualization[containers].  This method should work for anyone with Windows 10 Enterprise, Mac, or Ubuntu/Debian. If you have Windows 10 Home, please see our section on <<Windows Subsystem for Linux>> below.

To set up *LSDTopoTools* using Docker:

. Download and install https://www.docker.com/docker-windows[Docker for Windows] (only works with Windows 10 enterprise), https://www.docker.com/docker-mac[Docker for Mac], or Docker for https://www.docker.com/docker-ubuntu[Ubuntu] or https://www.docker.com/docker-debian[Debian].  On MacOS we recommend installing docker using brew: `brew cask install docker`

. Ensure that you allocate enough memory to your docker instance. This can be done in the `Advanced` section of the Docker preferences menu. We have tested all of todays examples with 8Gb of memory.

. Create an `LSDTopoTools` directory on your host operating system that you will share with the *LSDTopoTools* docker containers.
.. We'll assume this is in `C:\LSDTopoTools` on Windows
.. OR `\LSDTopoTools` on MacOS and Linux.
. Pull the full *LSDTopoTools* container and run it with a linked volume:
+
.. For windows:
+
[source,console]
----
$ docker run --rm -it -v C:/LSDTopoTools:/LSDTopoTools lsdtopotools/lsdtt_alpine_docker
----
+
.. For MacOS or Linux:
+
[source,console]
----
$ sudo docker run --rm -it -v /LSDTopoTools:/LSDTopoTools lsdtopotools/lsdtt_alpine_docker
----
+
.. Or if you have a different directory to LSDTopoTools data on your host machine:
+
[source,console]
----
$ docker run --rm -it -v /PATH/TO/YOUR/DATA:/LSDTopoTools lsdtopotools/lsdtt_alpine_docker
----
+
. Once you run this, you will need to run the script:
+
[source,console]
----
# Start_LSDTT.sh
----

=== Windows Subsystem for Linux

Some users have had difficulties getting Docker to install on Windows as it can require changing a setting in the BIOS. If this is the case, you can try to install the code natively using https://docs.microsoft.com/en-us/windows/wsl/faq[Windows Subsystem for Linux].  This is a piece of software from Microsoft that allows you to run a small Linux environment (in our case Ubuntu) from your Windows operating system.  We will download this software from the Microsoft Store, which should be preinstalled on any Windows 10 system.

. Firstly, download the Ubuntu app from Microsoft Store. If you can't find it, then you can also get it from https://www.microsoft.com/en-gb/p/ubuntu/9nblggh4msv6?rtc=1&activetab=pivot:overviewtab[this link]. You might need to restart your computer as prompted following this step.

WARNING: The download here is around ~200 Mb, so make sure you have enough space on your system for this. You don't need to register to the store in order to download the app.

. Launch the Ubuntu app by clicking on it from the Start menu.  You will then be prompted to create a new user account and password - *you can choose whatever you want for this, but make sure you remember it! The password is important for installing packages in the next steps.*
. The first time you launch, make sure you update and upgrade your standard packages by typing:
+
[source,console]
----
sudo apt update && sudo apt upgrade
----
+
. Now install the dependencies for LSDTopoTools:
+
[source,console]
----
sudo apt install -y build-essential git gdal-bin python-gdal libfftw3-dev cmake
----
+
. Then make a new directory for the LSDTopoTools code and download it from GitHub:
+
[source,console]
----
mkdir LSDTopoTools && cd LSDTopoTools
git clone https://github.com/LSDtopotools/LSDTopoTools2.git
----
+
. This will create a directory called `~/LSDTopoTools/LSDTopoTools2` in your home. Navigate to this directory and run the start up script:
+
[source,console]
----
cd LSDTopoTools2
bash lsdtt2_setup.sh
----
+
. This will compiled the code and make it executable by the computer. The script will display few warning messaged link to a specificity with Ubuntu subsystem for Window that struggle to add the binary to the path. An extra manipulation is required to complete the installation. First run the following commands to access the binary folder and check its path:
+
[source,console]
----
cd bin
pwd
----
+
. Copy the result of that last command, let's call it `/path/to/your/bin` for the sake of that example and run;
+
[source,console]
----
export PATH=/path/to/your/bin:$PATH
----
+
. This will link the `bin` folder to the system path and make the code executable from anywhere in the Linux subsystem.

==== Accessing data from Windows

Once installed in the linux subsystem, `Microsoft` actually strongly warns against accessing to Ubuntu file system from `windows` as it can damaged it quite easily. However the opposite is fairy easy: the easiest way to do that is to store the workshop data in your `C` drive, accessible from the linux subsystem with:
+
[source,console]
----
cd /mnt/c/
----
+


=== Get the workshop data

You can find all of the data you need for the workshop on https://github.com/LSDtopotools/LSDTopoTools_workshop[GitHub].  Let's clone this data (either on your Docker container or your Ubuntu subsystem).  First, navigate to your LSDTopoTools directory (on Docker this is `/LSDTopoTools/` or on the Ubuntu app `~/LSDTopoTools/`) and then clone the Git repository:

[source,console]
----
git clone https://github.com/LSDtopotools/EGU-workshop.git
----

This will create a directory called `EGU-workshop`. Navigate into this directory and take a look at the files within it. We have provided two main datasets for you to work with: a 1 m DEM from the Pozo catchment, a small catchment on Santa Cruz Island, one of the Californian Channel Islands; and a 10 m DEM of the entire island.  You can find these as subfolders within the `data` subdirectory. Let's first of all take a look at the 1 m data:
[source,console]
----
$ cd EGU-workshop/data/Pozo_1m/
$ ls
LSDTT_basic_metrics.param
LSDTT_chi_analysis.param
LSDTT_channel_extraction.param
Pozo_DTM.bil
Pozo_DTM.hdr
Pozo_DTM_hs.bil
Pozo_DTM_hs.hdr
----
The DEM here is in `ENVI bil` format: it consists of two files, `Pozo_DTM.bil` and `Pozo_DTM.hdr`.  We also provide three parameter files which all have the extension `.param`. These will be used to run the code throughout the workshop.

include::sections/channel_extraction.asc[]

include::sections/slope_curvature.asc[]

include::sections/chi_analysis.asc[]

== Appendix: In case of no internet

If we do not have stable internet access in the room we are working in, we have all of the workshop data stored on a series of USB drives that can be passed out to everyone. These drives contain a series of directories which should be copied to the user's local machine:

. Copy the docker image `lsd.tar.xz` found in the folder `Docker-Image` into the newly created `LSDTopoTools` directory on the user's computer.

. The directories `EGU-workshop` and `LSDTopoTools2` should be copied into the newly created `LSDTopoTools` directory on the user's computer.

. If docker has not yet been installed, find the relevant installer for your operating system in the `Docker-Install` directory, copy it to your machine and run it locally.

. If you are running Windows 10 but do not have Enterprise edition, you will need to install Windows Subsystem for Linux, the installer can be found in the directory `Windows-Subsystem`

Once the various install processes have been completed and the files have all been copied run the following command in your newly created `LSDTopoTools` directory on your computer:

[source,console]
----
docker load < lsd.tar.xz
----

You can now run the `docker run` command from the original instructions and follow them as normal, nothing else we do should require an internet connection.
