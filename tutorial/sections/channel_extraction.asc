== Channel extraction

The first part of the workshop will involve testing some different techniques for extracting channel networks from these topographic data.  Our channel extraction tool bundles four methods of channel extraction. These are:

* A rudimentary extraction using a drainage area threshold.
* The http://onlinelibrary.wiley.com/doi/10.1002/2013WR015167/abstract[Dreich method (Clubb et al., 2014)].
* The http://onlinelibrary.wiley.com/doi/10.1029/2012WR012452/abstract[Pelletier (2013) method].
* A geometric method combining elements of https://sites.google.com/site/geonethome/home[Geonet (Passalacqua et al., 2010)] and http://onlinelibrary.wiley.com/doi/10.1029/2012WR012452/abstract[Pelletier (2013)] methods that we developed for http://www.earth-surf-dynam.net/4/627/2016/esurf-4-627-2016.html[Grieve et al. (2016)] and http://onlinelibrary.wiley.com/doi/10.1002/2015JF003747/full[Clubb et al. (2016)] We call this the "Wiener" method (after the https://en.wikipedia.org/wiki/Wiener_filter[wiener filter] used to preprocess the data).

These methods are run based on a common interface via the program `lsdtt-channel-extraction`.

=== The parameter files

Like most of *LSDTopoTools*, you run this program by directing it to a parameter file. The parameter file has a series of keywords. Our convention is to place the parameter file in the same directory as your data.

NOTE: The parameter file has a specific format, but the filename can be anything you want. We tend to use the extensions `.param` and `.driver` for these files, but you could use the extension `.MyDogSpot` if that tickled your fancy.

The parameter file has keywords followed by the `:` character. After that there is a space and the value.

.Channel extraction parameter file format
************************************************
. Lines beginning with `#` are comments.
. Keywords or phrases are followed by a colon (`:`).
. The order of the keywords do not matter.
. Keywords are not case sensitive, but must match expected keywords.
. If a keyword is not found, a default value is assigned.
************************************************

==== Example channel extraction parameter file

Below is an example parameter file. This file is included in the shared folder with the DEM data.

----
# Parameters for channel extraction
# Comments are preceded by the hash symbol
# Documentation can be found here:
# https://lsdtopotools.github.io/LSDTT_documentation/LSDTT_channel_extraction.html

# These are parameters for the file i/o
# IMPORTANT: You MUST make the write directory: the code will not work if it doesn't exist.
read path: ./
write path: ./
read fname: Pozo_DTM
write fname: Pozo_DTM
channel heads fname: NULL

# Parameter for filling the DEM
min_slope_for_fill: 0.0001

# Parameters for selecting channels and basins
threshold_contributing_pixels: 1000
connected_components_threshold: 100
print_area_threshold_channels: true
print_wiener_channels: true
print_pelletier_channels: false
print_dreich_channels: false

write_hillshade: true
print_stream_order_raster: true
----

For more information on all the different options available see https://lsdtopotools.github.io/LSDTT_documentation/LSDTT_channel_extraction.html[the full channel extraction documentation].

=== Running the code

To run `lsdtt-channel-extraction`, first navigate to the directory with your data in it:

[source,console]
----
$ cd /LSDTopoTools/EGU-workshop/data/Pozo_1m/
----

All you need to do now is call the program with the parameter file as an argument:
[source,console]
----
$ lsdtt-channel-extraction LSDTT_channel_extraction.param
----
This will automatically run the code for you and produce several different datasets. Now call `ls` to look at the new files that have been created:

[source,console]
----
$ ls
LSDTT_basic_metrics.param       Pozo_DTM_AT_CN.csv              Pozo_DTM_W_SO.hdr
LSDTT_channel_extraction.param  Pozo_DTM_AT_SO.bil              Pozo_DTM_Wsources.csv
LSDTT_chi_analysis.param        Pozo_DTM_AT_SO.hdr              Pozo_DTM__qq.txt
Pozo_DTM.bil                    Pozo_DTM_ATsources.csv          Pozo_DTM_hs.bil
Pozo_DTM.bil.aux.xml            Pozo_DTM_W_CN.csv               Pozo_DTM_hs.hdr
Pozo_DTM.hdr                    Pozo_DTM_W_SO.bil               Pozo_DTM_ingestedParam.param
----

=== Visualising the results

For the purposes of this workshop, we will simply visualise the results of the code using GIS software.  We will show you how to do this with https://qgis.org/en/site/[QGIS], but you can use whatever software you like.

We have just run two different channel extraction methods, an area threshold method, whose outputs are denoted with `_AT`, and the Wiener method, denoted with `_W`.

Open QGIS and click on the Add Raster Layer button on the left of the screen, and select `Pozo_DTM_hs.bil`, `Pozo_DTM_AT_SO.bil` and `Pozo_DTM_W_SO.bil`:

image::images/load_rasters.png[width=300,align=center]

This will load each of the channel networks, coded by Strahler stream order and the hillshade of the catchment. We can then modify the display properties of each of our channel layers, and modify the display order of the layers to visualise the differences between our two networks.
