== Channel steepness analysis

The final thing we'll do today is to do some channel steepness analysis.  For background into channel profile analysis using both slope-area plots and chi, you can refer to our https://lsdtopotools.github.io/LSDTT_documentation/LSDTT_chi_analysis.html[website] which has a lot of detail on this.  Here, we'll just go through how to actually run the code.

=== Using the chi mapping tool

This runs in the same way as the channel extraction and the slope and curvature methods.  We'll select a series of basins to perform the analysis on, and then print out some csv files and rasters which can be used to visualise channel steepness.

Again, we use a parameter file to run the chi mapping tool.  It also has a series of keywords which are used to set which analyses we perform.

We will then visualise the output using QGIS.


=== Some comments on basin selection

In the *chi mapping tool*, we have several ways to select basins. We feel the default method is best (`find_complete_basins_in_window`). The options are:

* `find_complete_basins_in_window`: This goes through several refining steps. If first checks every basin in the raster and selects basins within a size window between `minimum_basin_size_pixels` and `maximum_basin_size_pixels`. It then takes the resulting list of basins and removes any that are influenced by the edge of the DEM (to ensure drainage area of the basin is correct). Finally, it removes nested basins, so that in the end you have basins of approximately the same size, not influenced by the edge of the DEM, and with no nested basins.
* `find_largest_complete_basins`: This is a somewhat old version that takes all basins draining to edge and works upstream from their outlets to find the largest sub-basin that is not influenced by the edge. To get this to work you *MUST ALSO* set `find_complete_basins_in_window: false`.
* `test_drainage_boundaries`: If either `find_complete_basins_in_window` or `find_largest_complete_basins` are `true` then this is ignored. If not, then it eliminates any basin that is influenced by the edge of the DEM.
* `BaselevelJunctions_file`: If this points to a file that includes a series of integers that refer to junction indices, it will load these indices. If the file doesn't contain a series of integers the most likely result is that it will crash!

=== Example parameter file

Below is an example parameter file for the Pozo dataset that will extract all the basins and produce chi data for each channel in each basin.

----
# Parameters for performing chi analysis
# Comments are preceded by the hash symbol
# Documentation can be found here:
# https://lsdtopotools.github.io/LSDTopoTools_ChiMudd2014/

# These are parameters for the file i/o
# IMPORTANT: You MUST make the write directory: the code will not work if it doesn't exist.
read path: ./
write path: ./
read fname: Pozo_DTM
write fname: Pozo_DTM
channel heads fname: Pozo_DTM_Wsources

# Parameter for filling the DEM
min_slope_for_fill: 0.0001

# Parameters for selecting channels and basins
threshold_contributing_pixels: 5000
minimum_basin_size_pixels: 50000
maximum_basin_size_pixels: 600000
test_drainage_boundaries: false
find_largest_complete_basins: false
find_complete_basins_in_window: true

# The data that you want printed to file
write_hillshade: false
print_basin_raster: true

# Chi analysis options
print_chi_data_maps: true
print_basic_M_chi_map_to_csv: true
A_0: 1
m_over_n: 0.45
----

=== Running the code

Our chi mapping program is called `lsdtt-chi-mapping`. Again, let's navigate to the directory with the Pozo catchment data in it:

[source,console]
----
$ cd /LSDTopoTools/EGU-workshop/data/Pozo_1m/
----

All you need to do now is call the program with the parameter file as an argument:
[source,console]
----
$ lsdtt-chi-mapping LSDTT_chi_analysis.param
----
This will automatically run the code for you and produce several different datasets. The key ones that we have generated during the chi analysis are:

. `Pozo_DTM_AllBasins.bil`: a raster showing the basins that were extracted and analysed.
. `Pozo_DTM_chi_data_map.csv`: a csv file of the channel network with information about simple parameters such as flow distance, drainage area, and chi coordinate.
. `Pozo_DTM_MChiBasic.csv`: a csv file with some basic channel steepness information for each point on the channel network.

=== Visualising the results

The first thing we can do to visualise these results is to load the dataset with the extension `_AllBasins.bil`. This raster gives the locations of all of the basins which have been identified for our analysis. This is always a good initial sanity check of our data. It can be loaded into QGIS in the same manner as each of the previous raster datasets we have loaded.

Now we are ready to look at the results of our chi analysis, and see the spatial distribution of our chi values across the landscape. To do this, we will import the csv file `Pozo_DTM_chi_data_map.csv` into QGIS. This can be done using the Add Delimited Text File button:

image::images/load_csv.png[width=300,align=center]

Select the file `Pozo_DTM_chi_data_map.csv` and QGIS should automatically recognise the latitude and longitude columns of the dataset. Click OK, and a dialogue will pop up asking you to select a coordinate system for the data. *Click Cancel* and the data will be projected on-the-fly and should overlie your hillshade and other datasets.

We now want to colour our points based on their chi value to see how this value varies across our catchments. Right click on the newly created point data layer and select properties, and navigate to the style tab. At the very top of the window, click on *Single symbol* and select *Graduated* instead. We can now select our chi values from the Column dropdown option, choose an appropriate sequential colour ramp to colour our points based on their chi value.

Choose a reasonably large number of classes (around 20) so that we have smooth transitions between colours, and click the classify button to populate the list of classes with our values. At this point if you click apply we will be able to see the colours of our points changing, but because of their dark outlines it is hard to see. Lets turn those off. Click on the change symbol button at the top of the window, and in the dialogue which opens, select simple marker. Now set the outline to transparent, and click OK.

Your data should now look something like this:

image::images/chi_map.png[width=600,align=center]

and you should be able to explore the spatial variability of chi values across the Pozo catchment.


=== Python scripts

We're also working on some python scripts for visualising outputs from the software.  This repository is messy and not very well ordered yet, but can be cloned https://github.com/LSDtopotools/LSDMappingTools.git[here] and you can read about our python visualisation tools https://lsdtopotools.github.io/LSDTT_documentation/LSDTT_visualisation.html[here]
